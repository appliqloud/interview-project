directive @authorization on FIELD_DEFINITION

input CreateProductInput {
  id: String!
  price: Float!
  translations: [ProductTranslationInput!]!
}

type Error {
  statusCode: Int!
  cause: String!
  message: String!
  context: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf).
"""
scalar JSON @specifiedBy(url: "https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf")

type Mutation {
  createOrder(order: OrderInput!): OrderError! @authorization
  markOrderAsReceived(id: String!): OrderError! @authorization
  cancelOrder(id: String!): OrderError! @authorization
  createProduct(product: CreateProductInput!): ProductError! @authorization
  updateProduct(id: String!, product: UpdateProductInput!): ProductError! @authorization
  deactivateProduct(id: String!): ProductError! @authorization
  activateProduct(id: String!): ProductError! @authorization
  deleteProduct(id: String!): ProductError! @authorization
}

type Order {
  id: String!
  status: OrderStatus!
  quantity: Int!
  total: Float!
  product: Product!
}

union OrderError = Order | Error

input OrderInput {
  productId: String!
  quantity: Int!
}

enum OrderStatus {
  PENDING
  CANCELLED
  RECEIVED
}

type Product {
  id: String!
  isActive: Boolean!
  price: Float!
  translations: [ProductTranslation!]!
  translation(language: String!): ProductTranslation
}

union ProductError = Product | Error

type ProductTranslation {
  language: String!
  description: String!
}

input ProductTranslationInput {
  language: String!
  description: String!
}

type Query {
  countOrders: Int! @authorization
  findOrderById(id: String!): OrderError! @authorization
  findOrders: [Order!]! @authorization
  countProducts: Int! @authorization
  findProductById(id: String!): ProductError! @authorization
  findProducts: [Product!]! @authorization
  me: UserError!
}

input UpdateProductInput {
  price: Float!
  translations: [ProductTranslationInput!]!
}

type User {
  id: String!
  firstName: String!
  lastName: String!
  role: String!
}

union UserError = User | Error